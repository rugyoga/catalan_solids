$fn =60;

// cribbed from http://forum.openscad.org/Rods-between-3D-points-tp13104p13115.html

module rod(p1,p2,tk){ // draw ray between 2 specified points
  translate(p1)
     sphere(r=tk);
  translate(p2)
    sphere(r=tk);
  translate((p1+p2)/2)
    rotate([-acos((p2[2]-p1[2]) / norm(p1-p2)),0,
            -atan2(p2[0]-p1[0],p2[1]-p1[1])])
       cylinder(r1=tk, h=norm(p1-p2), center = true);
}

// data cribbed from http://dmccooey.com/polyhedra/DisdyakisTriacontahedron.html

c0 = 3 * (15 + sqrt(5)) / 44;
c1 = (5 - sqrt(5)) / 2;
c2 = 3 * (5 + 4 * sqrt(5)) / 22;
c3 = 3 * (5 + sqrt(5)) / 10;
c4 = sqrt(5);
c5 = (75 + 27 * sqrt(5)) / 44;
c6 = (15 + 9 * sqrt(5)) / 10;
c7 = (5 + sqrt(5)) / 2;
c8 = 3 * (5 + 4 * sqrt(5)) / 11;

function vertices() =
  [[0.0, 0.0,  c8], // 0
   [0.0, 0.0, -c8],
   [ c8, 0.0, 0.0],
   [-c8, 0.0, 0.0],
   [0.0,  c8, 0.0],
   [0.0, -c8, 0.0],
   [0.0,  c1,  c7],
   [0.0,  c1, -c7],
   [0.0, -c1,  c7],
   [0.0, -c1, -c7],
   [ c7, 0.0,  c1], // 10
   [ c7, 0.0, -c1],
   [-c7, 0.0,  c1],
   [-c7, 0.0, -c1],
   [ c1,  c7, 0.0],
   [ c1, -c7, 0.0],
   [-c1,  c7, 0.0],
   [-c1, -c7, 0.0],
   [ c3, 0.0,  c6],
   [ c3, 0.0, -c6],
   [-c3, 0.0,  c6], // 20
   [-c3, 0.0, -c6],
   [ c6,  c3, 0.0],
   [ c6, -c3, 0.0],
   [-c6,  c3, 0.0],
   [-c6, -c3, 0.0],
   [0.0,  c6,  c3],
   [0.0,  c6, -c3],
   [0.0, -c6,  c3],
   [0.0, -c6, -c3],
   [ c0,  c2,  c5], // 30
   [ c0,  c2, -c5],
   [ c0, -c2,  c5],
   [ c0, -c2, -c5],
   [-c0,  c2,  c5],
   [-c0,  c2, -c5],
   [-c0, -c2,  c5],
   [-c0, -c2, -c5],
   [ c5,  c0,  c2],
   [ c5,  c0, -c2],
   [ c5, -c0,  c2], // 40
   [ c5, -c0, -c2],
   [-c5,  c0,  c2],
   [-c5,  c0, -c2],
   [-c5, -c0,  c2],
   [-c5, -c0, -c2],
   [ c2,  c5,  c0],
   [ c2,  c5, -c0],
   [ c2, -c5,  c0],
   [ c2, -c5, -c0],
   [-c2,  c5,  c0], // 50
   [-c2,  c5, -c0],
   [-c2, -c5,  c0],
   [-c2, -c5, -c0],
   [ c4,  c4,  c4],
   [ c4,  c4, -c4],
   [ c4, -c4,  c4],
   [ c4, -c4, -c4],
   [-c4,  c4,  c4],
   [-c4,  c4, -c4],
   [-c4, -c4,  c4], // 60
   [-c4, -c4, -c4]];
 
function faces() =
  [[ 18,  0,  8 ], // 0
   [ 18,  8, 32 ],
   [ 18, 32, 56 ],
   [ 18, 56, 40 ],
   [ 18, 40, 10 ],
   [ 18, 10, 38 ],
   [ 18, 38, 54 ],
   [ 18, 54, 30 ],
   [ 18, 30,  6 ],
   [ 18,  6,  0 ],
   [ 19,  1,  7 ], // 10
   [ 19,  7, 31 ],
   [ 19, 31, 55 ],
   [ 19, 55, 39 ],
   [ 19, 39, 11 ],
   [ 19, 11, 41 ],
   [ 19, 41, 57 ],
   [ 19, 57, 33 ],
   [ 19, 33,  9 ],
   [ 19,  9,  1 ],
   [ 20,  0,  6 ], // 20
   [ 20,  6, 34 ],
   [ 20, 34, 58 ],
   [ 20, 58, 42 ],
   [ 20, 42, 12 ],
   [ 20, 12, 44 ],
   [ 20, 44, 60 ],
   [ 20, 60, 36 ],
   [ 20, 36,  8 ],
   [ 20,  8,  0 ],
   [ 21,  1,  9 ], // 30
   [ 21,  9, 37 ],
   [ 21, 37, 61 ],
   [ 21, 61, 45 ],
   [ 21, 45, 13 ],
   [ 21, 13, 43 ],
   [ 21, 43, 59 ],
   [ 21, 59, 35 ],
   [ 21, 35,  7 ],
   [ 21,  7,  1 ],
   [ 22,  2, 11 ], // 40
   [ 22, 11, 39 ],
   [ 22, 39, 55 ],
   [ 22, 55, 47 ],
   [ 22, 47, 14 ],
   [ 22, 14, 46 ],
   [ 22, 46, 54 ],
   [ 22, 54, 38 ],
   [ 22, 38, 10 ],
   [ 22, 10,  2 ],
   [ 23,  2, 10 ], // 50
   [ 23, 10, 40 ],
   [ 23, 40, 56 ],
   [ 23, 56, 48 ],
   [ 23, 48, 15 ],
   [ 23, 15, 49 ],
   [ 23, 49, 57 ],
   [ 23, 57, 41 ],
   [ 23, 41, 11 ],
   [ 23, 11,  2 ],
   [ 24,  3, 12 ], // 60
   [ 24, 12, 42 ],
   [ 24, 42, 58 ],
   [ 24, 58, 50 ],
   [ 24, 50, 16 ],
   [ 24, 16, 51 ],
   [ 24, 51, 59 ],
   [ 24, 59, 43 ],
   [ 24, 43, 13 ],
   [ 24, 13,  3 ],
   [ 25,  3, 13 ], // 70
   [ 25, 13, 45 ],
   [ 25, 45, 61 ],
   [ 25, 61, 53 ],
   [ 25, 53, 17 ],
   [ 25, 17, 52 ],
   [ 25, 52, 60 ],
   [ 25, 60, 44 ],
   [ 25, 44, 12 ],
   [ 25, 12,  3 ],
   [ 26,  4, 16 ], // 80
   [ 26, 16, 50 ],
   [ 26, 50, 58 ],
   [ 26, 58, 34 ],
   [ 26, 34,  6 ],
   [ 26,  6, 30 ],
   [ 26, 30, 54 ],
   [ 26, 54, 46 ],
   [ 26, 46, 14 ],
   [ 26, 14,  4 ],
   [ 27,  4, 14 ], // 90
   [ 27, 14, 47 ],
   [ 27, 47, 55 ],
   [ 27, 55, 31 ],
   [ 27, 31,  7 ],
   [ 27,  7, 35 ],
   [ 27, 35, 59 ],
   [ 27, 59, 51 ],
   [ 27, 51, 16 ],
   [ 27, 16,  4 ],
   [ 28,  5, 15 ], // 100
   [ 28, 15, 48 ],
   [ 28, 48, 56 ],
   [ 28, 56, 32 ],
   [ 28, 32,  8 ],
   [ 28,  8, 36 ],
   [ 28, 36, 60 ],
   [ 28, 60, 52 ],
   [ 28, 52, 17 ],
   [ 28, 17,  5 ],
   [ 29,  5, 17 ], // 110
   [ 29, 17, 53 ],
   [ 29, 53, 61 ],
   [ 29, 61, 37 ],
   [ 29, 37,  9 ],
   [ 29,  9, 33 ],
   [ 29, 33, 57 ],
   [ 29, 57, 49 ],
   [ 29, 49, 15 ],
   [ 29, 15,  5 ]];
   
radius = 50; 
scale = radius/c8;
v = vertices() * scale;
f = faces();

module solid() {
    polyhedron(v, f);
}

// avoid this - it duplicates rods
module skeleton(items) {
    for (i = items) {
        face = f[i];   
        rod(v[face[0]], v[face[1]], 1);
        rod(v[face[1]], v[face[2]], 1);
        rod(v[face[2]], v[face[0]], 1);
    }
}

module labels(items) {
    for (i = items) {
        translate( v[i] ) {
            text( str( "c", i ) );
        };
    };
}

module cube_centered(width) {
    translate([-width/2, -width/2, -width]) cube(width);
}

module full_skeleton() {
    skeleton([0:119]);
}

temp = [[0.0, 0.0,  c8], // v[0]
        [0.0,  c1,  c7], // v[6]
        [ c3, 0.0,  c6], // v[18] *
        [0.0, -c1,  c7], // v[8]  *
        [-c3, 0.0,  c6], // v[20]
        [0.0,  c1, -c7], // v[7]  *
        [ c1, -c7, 0.0], // v[15] *
        [0.0, -c1, -c7], // v[9]
        [ c1,  c7, 0.0], // v[14]
        [ c3, 0.0, -c6], // v[19]
        [0.0, 0.0, -c8]]; // v[1]

module diamond() {
   rod(v[0], v[6], 1);
   rod(v[0], v[18], 1);
   rod(v[0], v[8], 1);
   rod(v[0], v[20], 1);
   rod(v[20], v[6], 1);
   rod(v[6], v[18], 1);
   rod(v[18], v[8], 1);
   rod(v[8], v[20], 1);
   /* external vertices: 6, 18, 8, 20
      removal tetras: [[8, 18, 7, 15],
                       [6, 18, 9, 14],
                       [8, 20, 7, 15],
                       [20, 6, 19, 1]] */
}

module hollow_diamond() {
    difference() {
        diamond();
        rod(v[20], v[6], 1);
        rod(v[6], v[18], 1);
        rod(v[18], v[8], 1);
        rod(v[8], v[20], 1);
    }
}

module tetra(points) {
    polyhedron( points, [[2, 1, 0], [1, 3, 0], [2, 3, 1], [0, 3, 2]] );
} 

module flattened_diamond() {
    difference() {
        diamond();
        tetra( [v[8], v[18], v[7], v[15]] * 2);
        tetra( [v[6], v[18], v[9], v[14]] * 2);
        tetra( [v[8], v[20], v[7], v[15]] * 2);
        tetra( [v[20], v[6], v[19], v[1]] * 2);
    }
}

module four_vertex(){
   rod(v[0], v[6], 1);
   rod(v[0], v[18], 1);
   rod(v[0], v[8], 1);
   rod(v[0], v[20], 1);
}

module ten_vertex(){
   rod(v[26], v[50], 1);
   rod(v[26], v[58], 1);
   rod(v[26], v[34], 1);
   rod(v[26], v[6], 1);
   rod(v[26], v[30], 1);
   rod(v[26], v[54], 1);
   rod(v[26], v[46], 1);
   rod(v[26], v[14], 1);
   rod(v[26], v[4], 1);
   rod(v[26], v[16], 1);
}

module six_vertex(){
   rod(v[6], v[30], 1);
   rod(v[6], v[18], 1);
   rod(v[6], v[0], 1);
   rod(v[6], v[20], 1);
   rod(v[6], v[34], 1);
   rod(v[6], v[26], 1);
}


//diamond();
flattened_diamond();
//hollow_diamond();

//tetra( [v[8], v[18], v[7], v[15]] );
//tetra( [v[8], v[18], v[7], v[15]] );
//full_skeleton();
//labels( [0:20]);

//four_vertex();
//translate([-50, 0,-7]) rotate([53, 5, 5]) ten_vertex();
//translate([0,-100,-8]) rotate([20,0,0]) six_vertex();
//solid();
